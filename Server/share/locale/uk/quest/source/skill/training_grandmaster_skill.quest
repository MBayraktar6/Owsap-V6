quest training_grandmaster_skill begin
	state start begin
		when 50513.use begin
			if pc.get_skill_group() == 0 then
				say_title(c_locale(9913))
				say(c_locale(9924))
				return
			end

			if get_time() < pc.getqf("next_time") then
				if pc.is_skill_book_no_delay() then
					say_title(c_locale(9913))
					say(c_locale(9935))
					wait()
				else
					say_title(c_locale(9913))
					say(c_locale(9936))
					return
				end
			end

			local result = training_grandmaster_skill.BuildGrandMasterSkillList(special.active_skill_list, pc.get_job(), pc.get_skill_group())

			local vnum_list = result[1]
			local name_list = result[2]

			if table.getn(vnum_list) == 0 then
				say_title(c_locale(9913))
				say(c_locale(9937))
				return
			end

			say_title(c_locale(9913))
			say(c_locale(9938))

			local menu_list = {}
			table.foreach(name_list, function(i, name) table.insert(menu_list, name) end)
			table.insert(menu_list, c_locale(2426))

			local s = select_table(menu_list)
			if table.getn(menu_list) == s then
				return
			end

			local skill_name = name_list[s]
			local skill_vnum = vnum_list[s]
			local skill_level = pc.get_skill_level(skill_vnum)
			local cur_alignment = pc.get_real_alignment()
			local need_alignment = 1000 + 500 * (skill_level - 30)

			local title = c_locale(9941, skill_name)

			say_title(c_locale(9913))
			say(c_locale(9942))

			if cur_alignment < (-19000 + need_alignment) then
				say_reward(c_locale(9914))
				return
			end

			if cur_alignment < 0 then
				say_reward(c_locale(9915, need_alignment, need_alignment * 2))
				say_reward(c_locale(9916))
				need_alignment = need_alignment * 2
			elseif cur_alignment < need_alignment then
				say_reward(c_locale(9917, need_alignment))
				say_reward(c_locale(9918))
			else
				say_reward(c_locale(9917, need_alignment))
			end

			local s = select(c_locale(2669), c_locale(2426))
			if s == 2 then
				return
			end

			if cur_alignment >= 0 and cur_alignment < need_alignment then
				say_title(title)
				say_reward(c_locale(9919))
				say(c_locale(9920))

				if select(c_locale(4473), c_locale(3418)) == 2 then
					return
				end
			end

			if get_time() < pc.getqf("next_time") then
				if pc.is_skill_book_no_delay() then
					pc.remove_skill_book_no_delay()
				else
					say_title(c_locale(9913))
					return
				end
			end

			pc.setqf("next_time", get_time() + time_hour_to_sec(number(8, 12)))

			if need_alignment > 0 then
				if pc.count_item(50513) > 0 then
					if pc.learn_grand_master_skill(skill_vnum) then
						pc.change_alignment(-need_alignment)

						say_title(title)
						say_reward(c_locale(9923))

						if 40 == pc.get_skill_level(skill_vnum) then
							say(c_locale(9925))
							say(c_locale(9926, skill_name))
							say(c_locale(9927))
						else
							say(c_locale(9928))
							say(c_locale(9929, skill_name, (skill_level -30 + 1 + 1)))
						end
						say_reward(c_locale(9930))
						say_reward(c_locale(9931, need_alignment))
					else
						say_title(title)
						say_reward(c_locale(9932))
						say(c_locale(9933))
						say_reward(c_locale(9934))
						pc.change_alignment(-number(need_alignment / 3, need_alignment / 2))
					end
					pc.remove_item(50513)
				else
					char_log(0, "HACK 50513", pc.get_name())
				end
			end
		end

		when 50527.use begin
			if pc.get_skill_group() == 0 then
				say_title(c_locale(9913))
				say(c_locale(9924))
				return
			end

			if get_time() < pc.getqf("next_time") then
				if pc.is_skill_book_no_delay() then
					say_title(c_locale(9913))
					say(c_locale(9935))
					wait()
				else
					say_title(c_locale(9913))
					say(c_locale(9936))
					return
				end
			end

			local result = training_grandmaster_skill.BuildGrandMasterSkillList(special.active_conqueror_skill_list, pc.get_job(), pc.get_skill_group())

			local vnum_list = result[1]
			local name_list = result[2]

			if table.getn(vnum_list) == 0 then
				say_title(c_locale(9913))
				say(c_locale(9937))
				return
			end

			say_title(c_locale(9913))
			say(c_locale(9938))

			local menu_list = {}
			table.foreach(name_list, function(i, name) table.insert(menu_list, name) end)
			table.insert(menu_list, c_locale(2426))

			local s = select_table(menu_list)
			if table.getn(menu_list) == s then
				return
			end

			local skill_name = name_list[s]
			local skill_vnum = vnum_list[s]
			local skill_level = pc.get_skill_level(skill_vnum)
			local cur_alignment = pc.get_real_alignment()
			local need_alignment = 1000 + 500 * (skill_level - 30)

			local title = c_locale(9941, skill_name)

			say_title(c_locale(9913))
			say(c_locale(9942))

			if cur_alignment < (-19000 + need_alignment) then
				say_reward(c_locale(9914))
				return
			end

			if cur_alignment < 0 then
				say_reward(c_locale(9915, need_alignment, need_alignment * 2))
				say_reward(c_locale(9916))
				need_alignment = need_alignment * 2
			elseif cur_alignment < need_alignment then
				say_reward(c_locale(9917, need_alignment))
				say_reward(c_locale(9918))
			else
				say_reward(c_locale(9917, need_alignment))
			end

			local s = select(c_locale(2669), c_locale(2426))
			if s == 2 then
				return
			end

			if cur_alignment >= 0 and cur_alignment < need_alignment then
				say_title(title)
				say_reward(c_locale(9919))
				say(c_locale(9920))

				if select(c_locale(4473), c_locale(3418)) == 2 then
					return
				end
			end

			if get_time() < pc.getqf("next_time") then
				if pc.is_skill_book_no_delay() then
					pc.remove_skill_book_no_delay()
				else
					say_title(c_locale(9913))
					return
				end
			end

			pc.setqf("next_time", get_time() + time_hour_to_sec(number(8, 12)))

			if need_alignment > 0 then
				if pc.count_item(50527) > 0 then
					if pc.learn_grand_master_skill(skill_vnum) then
						pc.change_alignment(-need_alignment)

						say_title(title)
						say_reward(c_locale(9923))

						if 40 == pc.get_skill_level(skill_vnum) then
							say(c_locale(9925))
							say(c_locale(9926, skill_name))
							say(c_locale(9927))
						else
							say(c_locale(9928))
							say(c_locale(9929, skill_name, (skill_level -30 + 1 + 1)))
						end
						say_reward(c_locale(9930))
						say_reward(c_locale(9931, need_alignment))
					else
						say_title(title)
						say_reward(c_locale(9932))
						say(c_locale(9933))
						say_reward(c_locale(9934))
						pc.change_alignment(-number(need_alignment / 3, need_alignment / 2))
					end
					pc.remove_item(50527)
				else
					char_log(0, "HACK 50527", pc.get_name())
				end
			end
		end

		function BuildGrandMasterSkillList(list, job, group)
			GRAND_MASTER_SKILL_LEVEL = 30
			PERFECT_MASTER_SKILL_LEVEL = 40

			local skill_list = list[job + 1][group]
			local ret_vnum_list = {}
			local ret_name_list = {}

			table.foreach(skill_list,
				function(i, skill_vnum)
					local skill_level = pc.get_skill_level(skill_vnum)

					if skill_level >= GRAND_MASTER_SKILL_LEVEL and skill_level < PERFECT_MASTER_SKILL_LEVEL then
						table.insert(ret_vnum_list, skill_vnum)
						--local name = locale.GM_SKILL_NAME_DICT[skill_vnum] -- locale.lua
						local name = c_skill_name(skill_vnum)
						if name == nil then name = skill_vnum end
						table.insert(ret_name_list, name)
					end
				end
			)

			return { ret_vnum_list, ret_name_list }
		end
	end
end